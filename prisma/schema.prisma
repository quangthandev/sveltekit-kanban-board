// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  boards   Board[]
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Board {
  id            Int      @id @default(autoincrement())
  name          String
  color         String   @default("#e0e0e0")
  imageId       String?
  imageThumbUrl String?
  imageFullUrl  String?
  imageUserName String?
  imageLinkHTML String?
  createdAt     DateTime @default(now())
  columns       Column[]
  items         Item[]
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Column {
  id      String @id @default(uuid())
  name    String
  order   Float  @default(0)
  items   Item[]
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
}

model Item {
  id      String  @id @default(uuid())
  title   String
  content String?

  // we split the difference between the prev/next items. If an item is dropped
  // between 1.00 and 2.00 it will be 1.50. If dropped between 1.50 and 2.00 it
  // will be 1.75, etc.
  order Float

  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String

  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int

  attachments Attachment[]

  cover Cover?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  type      String
  url       String

  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String

  cover     Cover?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cover {
  id        String   @id @default(uuid())
  color     String?
  url       String?

  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String  @unique

  attachment Attachment? @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  attachmentId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
